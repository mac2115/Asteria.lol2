local Workspace = game:GetService("Workspace")
local loading = tick()

local SharedRequires = {}
setmetatable(SharedRequires, {
	__metatable = "Secure",
	__index = function(t, k)
		return rawget(t, k)
	end,
	__newindex = function(t, k, v)
		return rawset(t, k, v)
	end,
})

local names = {
	"RunService",
	"TweenService",
	"Workspace",
	"ReplicatedStorage",
	"Players",
	"UserInputService",
}
setmetatable(names, {
	__metatable = "Locked",
	__index = function(t, k)
		return rawget(t, k)
	end,
	__newindex = function(t, k, v)
		return rawset(t, k, v)
	end,
})
SharedRequires["Services"] = {}

SharedRequires["Services"].DumpServices = function()
	local services = {}
	setmetatable(services, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k)
		end,
		__newindex = function(t, k, v)
			return rawset(t, k, v)
		end,
	})
	for _, index in names do
		local service = game:GetService(index)
		local str = string.gsub(service.Name, " ", "")
		service.Name = str
		table.insert(services, service)
	end

	SharedRequires["Services"] = services
end

SharedRequires["Services"].GetService = function(name)
	for _, v in SharedRequires["Services"] do
		if rawequal(name, v.Name) then
			return v
		end
	end
end

SharedRequires["Maid"] = {}

SharedRequires["Maid"].Cleanup = function()
	SharedRequires = {}
	getgenv().Settings = {}
	getgenv().Hooks = {}
	for i, v in getgenv().Connections do
		v:Disconnect()
	end
	getgenv().Connections = {}
	getgenv().States = {}
	getgenv().NpcList = {}
	getgenv().Moblist = {}
end

SharedRequires["Maid"].Setup = function()
	getgenv().Moblist = {
		"GenericSlayer",
		"FrostyOni",
		"Mikichinn",
		"Green Demon",
		"Blue Demon",
		"BlueDemonEntertaiment",
		"GenericOni",
		"GreenDemonEntertaiment",
		"Okuro",
		"----Boss----",
		"Kaigaku",
		"Gyutaro",
		"Zenitsu",
	}
	getgenv().NpcList = {}
	getgenv().Settings = { Autofarm = { Toggle = false, Mobs = {}, Position = 10 }, TweenSpeed = 100 }
	getgenv().Hooks = {}
	getgenv().States = { Tweening = false }
	getgenv().Connections = {}

	setmetatable(getgenv().Settings, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k, val)
		end,
	})

	setmetatable(getgenv().Hooks, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k, val)
		end,
	})

	setmetatable(getgenv().States, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k, val)
		end,
	})
end

SharedRequires["Maid"].DumpNpc = function()
	for i, v in pairs(Workspace.Npcs:GetChildren()) do
		if not v:IsA("Model") then
			continue
		end
		table.insert(getgenv().NpcList, v.Name)
	end
end

SharedRequires["Env"] = {}

SharedRequires["Env"].loadstr = function(link)
	local ref = clonefunction(loadstring)
	return ref(game:HttpGet(link))()
end

SharedRequires["Env"].croutinelib = function()
	local lib = {}
	setmetatable(lib, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k)
		end,
		__newindex = function(t, k, v)
			return rawset(t, k, v)
		end,
	})

	for i, v in coroutine do
		if type(v) == "function" then
			local c = clonefunction(v)
			rawset(lib, i, c)
		end
	end
	return lib
end

SharedRequires["Env"].getnamecallmethod = function()
	local c = clonefunction(getnamecallmethod)
	return c()
end

SharedRequires["Env"].CallHelper = function(originalFunc)
	return setmetatable({}, {
		__call = function(t, ...)
			return originalFunc(...)
		end,
	})
end

SharedRequires["Env"].SecureCall = function(originalFunc, args)
	local tbl = {}
	setmetatable(tbl, {
		__call = function(t, ...)
			return SharedRequires["Env"].CallHelper(originalFunc)(...)
		end,
		__metatable = "Locked",
		__newindex = function(t, k) end,
	})
	return tbl(args)
end

SharedRequires["Env"].TrampHelper = function(originalFunc, ...)
	setthreadidentity(3)
	local result = originalFunc(...)
	setthreadidentity(3)
	return result
end

SharedRequires["Env"].TrampolineCall = function(originalFunc, ...)
	return SharedRequires["Env"].TrampHelper(originalFunc, ...)
end

SharedRequires["Bypasses"] = {}

SharedRequires["Bypasses"].AdonisBypass = function()
	for i, v in getgc() do
		if type(v) ~= "table" then
			continue
		end
	end
end

local Services = SharedRequires["Services"]
local Maid = SharedRequires["Maid"]
local LuaEnv = SharedRequires["Env"]
local croutine = LuaEnv.croutinelib()

Maid.Setup()

Maid.DumpNpc()

Services.DumpServices()

local Players = Services.GetService("Players")

local ReplicatedStorage = Services.GetService("ReplicatedStorage")
local RunService = Services.GetService("RunService")
local UserInputService = Services.GetService("UserInputService")
local TweenService = Services.GetService("TweenService")
local Workspace = Services.GetService("Workspace")

local AsyncRemote = ReplicatedStorage.Remotes.Async

local SecureCall = SharedRequires["Env"].SecureCall

SecureCall(warn, "// [1/4]: Asteria Loading.")

local plr = Players.LocalPlayer

Players = Services.GetService("Players")

SecureCall(warn, "// [2/4]: Asteria Services Dumped.")

function angles(position)
	if position >= 0 then
		return -90
	else
		return 90
	end
end

function Tween(Target)
	local TotalDuration, StartTime, PositionDelta, StartingPosition, HRP, Delta, Progress, MappedPosition
	HRP = (plr.Character and plr.Character:FindFirstChild("HumanoidRootPart"))
	if not HRP then
		return
	end
	StartingPosition = HRP.Position
	PositionDelta = (Target.p - StartingPosition)
	StartTime = tick()
	TotalDuration = (StartingPosition - Target.p).magnitude / getgenv().Settings.TweenSpeed
	local angle
	if getgenv().Settings.Autofarm.Toggle then
		repeat
			task.wait()
			HRP.Velocity = Vector3.new()
			angle = angles(getgenv().Settings.Autofarm.Position)
			Delta = tick() - StartTime
			Progress = math.min(Delta / TotalDuration, 1)
			MappedPosition = StartingPosition + (PositionDelta * Progress)
			if (HRP.Position - Target.p).magnitude > 25 then
				HRP.CFrame = CFrame.new(MappedPosition) * CFrame.new(0, getgenv().Settings.Autofarm.Position, 0)
				* CFrame.Angles(math.rad(angle), 0, 0)
				getgenv().States.Tweening = true
			else
				HRP.CFrame = CFrame.new(Target.p)
					* CFrame.new(0, getgenv().Settings.Autofarm.Position, 0)
					* CFrame.Angles(math.rad(angle), 0, 0)
				getgenv().States.Tweening = false
			end
		until (not getgenv().Settings.Autofarm.Toggle) or (HRP.Position - Target.p).magnitude <= 25
		if (HRP.Position - Target.p).magnitude <= 25 then
			getgenv().States.Tweening = false
		end
	end
end

function Autofarm()
	if not getgenv().Settings.Autofarm.Toggle then
		return
	end

	if not plr.Character then
		return
	end

	for i, v in pairs(Workspace:GetChildren()) do
		if not v:IsA("Model") or not v:FindFirstChildWhichIsA("Humanoid") then
			continue
		end

		if rawget(getgenv().Settings.Autofarm.Mobs, v.Name) then
			if plr.Character:FindFirstChild("Katana") then
				ReplicatedStorage.Remotes.Async:FireServer("Katana", "EquippedEvents", true, true)
			end

			local dist = (plr.Character:GetPivot().p - v:GetPivot().p).magnitude
			local isdowned = v:FindFirstChild("Down")

			if not isdowned then
				print("executing")
				Tween(v:GetPivot(), v)
				ReplicatedStorage.Remotes.Async:FireServer("Katana", "Server")
			end
		end
	end
end

getgenv().Settings.BreakMobs = { Toggle = false, Radius = 25 }

function breakmobs()
	if not plr.Character then
		return
	end
	if not getgenv().Settings.BreakMobs.Toggle then
		return
	end

	for i, v in Workspace:GetChildren() do
		if table.find(getgenv().Moblist, v.Name) and v:FindFirstChildWhichIsA("Humanoid") then
			local dist = (plr.Character.HumanoidRootPart.Position - v:GetPivot().Position).Magnitude
			if dist > getgenv().Settings.BreakMobs.Radius then
				continue
			end

			local hum = v:FindFirstChildWhichIsA("Humanoid")
			hum.PlatformStand = true
		end
	end
end

function teleport(name)
	if not plr.Character then
		return
	end
	for i, v in pairs(Workspace.Npcs:GetChildren()) do
		if not rawequal(name, v.Name) then
			continue
		end
		plr.Character:PivotTo(v:GetPivot())
	end
end

--//Movement

local UserInputService = game:GetService("UserInputService")
local walkie = nil
getgenv().Settings.Speed = { Speed = 50 }
function speed()
	if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
		if getgenv().Settings.Speed.Toggle then
			if walkie == nil then
				walkie = Instance.new("BodyVelocity")
			end
			walkie.Name = "Lolywap"
			walkie.MaxForce = Vector3.new(1000000000, 0, 10000000000)
			walkie.Parent = plr.Character.HumanoidRootPart
			if
				plr.Character.Humanoid.MoveDirection.Magnitude ~= 0
				and plr.Character.Humanoid.MoveDirection ~= Vector3.new(0, 0, 0)
			then
				walkie.Velocity = plr.Character.Humanoid.MoveDirection * getgenv().Settings.Speed.Speed
			else
				walkie.Velocity = plr.Character.Humanoid.MoveDirection
			end
		elseif walkie ~= nil and not getgenv().Settings.Speed.Toggle then
			walkie.Parent = nil
		end
	end
end

function godmode()
	AsyncRemote:FireServer("Character", "FallDamageServer", -0 / 0)
end

getgenv().Settings.Dupe = false
function dupe()
	local old
	old = hookmetamethod(game, "__namecall", function(self, ...)
		local args = { ... }
		if rawequal(LuaEnv.getnamecallmethod(), "InvokeServer") and rawequal(self.Name, "Sync") then
			if rawequal(args[3], "Drop") then
				args[5] = -100000000
				if getgenv().Settings.Dupe then
					return old(self, unpack(args))
				end
				return old(self, ...)
			end
			return old(self, ...)
		end
		return old(self, ...)
	end)
end
SecureCall(warn, "// [3/4]: Asteria Functions Loaded.")

--//Movement
getgenv().Settings.JumpHeight = 50

function infjump()
	if not getgenv().Settings.InfJump then
		return
	end
	if
		plr.Character
		and plr.Character:FindFirstChild("HumanoidRootPart")
		and UserInputService:IsKeyDown(Enum.KeyCode.Space)
	then
		plr.Character.HumanoidRootPart.Velocity = Vector3.new(
			plr.Character.HumanoidRootPart.Velocity.X,
			getgenv().Settings.JumpHeight,
			plr.Character.HumanoidRootPart.Velocity.Z
		)
	end
	task.wait(0.1)
end

getgenv().Control = {
	left = 0,
	right = 0,
	back = 0,
	forward = 0,
}
local input1 = UserInputService.InputBegan:Connect(function(k, gameProcessedEvent)
	if gpe then
		return
	end

	if k.KeyCode == Enum.KeyCode.W then
		getgenv().Control.forward = -1
	elseif k.KeyCode == Enum.KeyCode.S then
		getgenv().Control.back = 1
	elseif k.KeyCode == Enum.KeyCode.A then
		getgenv().Control.left = -1
	elseif k.KeyCode == Enum.KeyCode.D then
		getgenv().Control.right = 1
	end
end)

local CodesEnded = {}

local input2 = UserInputService.InputEnded:Connect(function(k, gpe)
	if gpe then
		return
	end
	if k.KeyCode == Enum.KeyCode.W then
		getgenv().Control.forward = 0
	elseif k.KeyCode == Enum.KeyCode.S then
		getgenv().Control.back = 0
	elseif k.KeyCode == Enum.KeyCode.A then
		getgenv().Control.left = 0
	elseif k.KeyCode == Enum.KeyCode.D then
		getgenv().Control.right = 0
	end
end)

table.insert(getgenv().Connections, input1)
table.insert(getgenv().Connections, input2)

function getvector()
	if rawequal(getgenv().Control.left, nil) then
		return Vector3.new(0, 0, 0)
	end

	return Vector3.new(
		getgenv().Control.left + getgenv().Control.right,
		0,
		getgenv().Control.forward + getgenv().Control.back
	)
end

getgenv().Settings.Fly = {}
getgenv().Settings.Fly.Speed = 50

local bdv = nil
local camera = Workspace.CurrentCamera
function fly()
	if getgenv().Settings.Fly.Toggle == true then
		if bdv == nil then
			bdv = Instance.new("BodyVelocity")
		end
		bdv.Name = "Flylolwap"
		bdv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
		bdv.Parent = plr.Character.HumanoidRootPart
		if
			getgenv().Control.left == -1
			or getgenv().Control.right == 1
			or getgenv().Control.back == 1
			or getgenv().Control.forward == -1
		then
			if bdv ~= nil then
				bdv.Velocity = camera.CFrame:VectorToWorldSpace(getvector() * getgenv().Settings.Fly.Speed)
			else
				return
			end
		else
			if bdv ~= nil then
				bdv.Velocity = camera.CFrame:VectorToWorldSpace(getvector())
			else
				return
			end
		end
	else
		if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and bdv then
			bdv.Parent = nil
		end
	end
end

function noclip()
	if getgenv().Settings.Noclip then
		if plr.Character then
			for i, v in next, plr.Character:GetChildren() do
				if v:IsA("Part") and not string.find(v.Name, "Leg") then
					v.CanCollide = false
				end
			end
		end
	else
		if plr.Character then
			for i, v in next, plr.Character:GetChildren() do
				if v:IsA("Part") and not string.find(v.Name, "Leg") then
					v.CanCollide = true
				end
			end
		end
	end
end

dupe()

local repo = "https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/"

local Library = SecureCall(LuaEnv.loadstr, repo .. "Library.lua")
local ThemeManager = SecureCall(LuaEnv.loadstr, repo .. "addons/ThemeManager.lua")
local SaveManager = SecureCall(LuaEnv.loadstr, repo .. "addons/SaveManager.lua")
local Window = Library:CreateWindow({
	Title = "Asteria.lol | Demonfall",
	Center = true,
	AutoShow = true,
	TabPadding = 8,
	MenuFadeTime = 0.2,
})

local Tabs = {
	-- Creates a new tab titled Main
	Main = Window:AddTab("Main"),
	Misc = Window:AddTab("Misc"),
	["UI Settings"] = Window:AddTab("UI Settings"),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox("Main")
LeftGroupBox:AddToggle("MyToggle", {
	Text = "Autofarm toggle",
	Default = false,
	Tooltip = "",
	Callback = function(Value)
		getgenv().Settings.Autofarm.Toggle = Value
	end,
})

LeftGroupBox:AddDropdown("MyMultiDropdown", {
	Values = getgenv().Moblist,
	Default = 1,
	Multi = true,

	Text = "Mob Selection",
	Tooltip = "Select a mob",

	Callback = function(Value)
		rawset(getgenv().Settings.Autofarm, "Mobs", Value)
	end,
})

LeftGroupBox:AddSlider("MySlider", {
	Text = "Farm position",
	Default = 10,
	Min = -25,
	Max = 25,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		getgenv().Settings.Autofarm.Position = Value
	end,
})

LeftGroupBox:AddSlider("MySlider", {
	Text = "Tween Speed",
	Default = 100,
	Min = 10,
	Max = 500,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		getgenv().Settings.TweenSpeed = Value
	end,
})

local LeftGroupBox = Tabs.Misc:AddLeftGroupbox("Character")

LeftGroupBox:AddButton({
	Text = "Godmode",
	Func = function()
		godmode()
	end,
	DoubleClick = false,
	Tooltip = "",
})

LeftGroupBox:AddToggle("MyToggle", {
	Text = "Break Mobs toggle (Breaks some)",
	Default = false,
	Tooltip = "",
	Callback = function(Value)
		getgenv().Settings.BreakMobs.Toggle = Value
	end,
})

LeftGroupBox:AddSlider("MySlider", {
	Text = "Break Mobds range",
	Default = 25,
	Min = 0,
	Max = 100,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		getgenv().Settings.BreakMobs.Radius = Value
	end,
})

local LeftGroupBox = Tabs.Misc:AddLeftGroupbox("Movement")

LeftGroupBox:AddToggle("MyToggle", {
	Text = "Fly toggle",
	Default = false,
	Tooltip = "",

	Callback = function(Value)
		getgenv().Settings.Fly.Toggle = Value
	end,
})

LeftGroupBox:AddSlider("MySlider", {
	Text = "Speed",
	Default = 50,
	Min = 0,
	Max = 250,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		getgenv().Settings.Fly.Speed = Value
	end,
})

LeftGroupBox:AddToggle("MyToggle", {
	Text = "Noclip toggle",
	Default = false,
	Tooltip = "",

	Callback = function(Value)
		getgenv().Settings.Noclip = Value
	end,
})

LeftGroupBox:AddToggle("MyToggle", {
	Text = "Infinite jump toggle",
	Default = false,
	Tooltip = "",

	Callback = function(Value)
		getgenv().Settings.InfJump = Value
	end,
})

LeftGroupBox:AddToggle("MyToggle", {
	Text = "Speed toggle",
	Default = false,
	Tooltip = "",

	Callback = function(Value)
		getgenv().Settings.Speed.Toggle = Value
	end,
})

LeftGroupBox:AddSlider("MySlider", {
	Text = "Speed",
	Default = 50,
	Min = 0,
	Max = 250,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		getgenv().Settings.Speed.Speed = Value
	end,
})

local LeftGroupBox = Tabs.Misc:AddLeftGroupbox("Data")
LeftGroupBox:AddToggle("MyToggle", {
	Text = "Dupe toggle",
	Default = false,
	Tooltip = "",
	Callback = function(Value)
		getgenv().Settings.Dupe = Value
	end,
})

local LeftGroupBox = Tabs.Misc:AddRightGroupbox("Data")
LeftGroupBox:AddDropdown("MyMultiDropdown", {
	Values = getgenv().NpcList,
	Default = 1,
	Multi = false,

	Text = "NPC Teleport",
	Tooltip = "Select an npc to teleport",

	Callback = function(Value)
		teleport(Value)
	end,
})

Library:SetWatermarkVisibility(false)
local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

local WatermarkConnection = game:GetService("RunService").RenderStepped:Connect(function()
	FrameCounter = FrameCounter + 1

	if (tick() - FrameTimer) >= 1 then
		FPS = FrameCounter
		FrameTimer = tick()
		FrameCounter = 0
	end

	Library:SetWatermark(
		("Asteria.lol | %s fps | %s ms"):format(
			math.floor(FPS),
			math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
		)
	)
end)

Library.KeybindFrame.Visible = false

Library:OnUnload(function()
	WatermarkConnection:Disconnect()
	Maid.Cleanup()
	Library.Unloaded = true
end)

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

local cButton = MenuGroup:AddButton({
	Text = "Copy discord link",
	Func = function()
		setclipboard("discord.gg/t2cXFpkGBh")
	end,
	DoubleClick = false,
	Tooltip = "",
})

MenuGroup:AddToggle("MyToggle", {
	Text = "Keybinds toggle",
	Default = false,
	Tooltip = "",

	Callback = function(Value)
		Library.KeybindFrame.Visible = Value
	end,
})

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "End", NoUI = true, Text = "Menu keybind" })

Library.ToggleKeybind = Options.MenuKeybind
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("Asteria.lol")
SaveManager:SetFolder("Asteria.lol/TypeSoul")

SaveManager:BuildConfigSection(Tabs["UI Settings"])

ThemeManager:ApplyToTab(Tabs["UI Settings"])

SaveManager:LoadAutoloadConfig()

local RunCon = RunService.Heartbeat:connect(function()
	Autofarm()
	fly()
	speed()
	noclip()
	infjump()
	breakmobs()
end)

table.insert(getgenv().Connections, RunCon)

local timer = tick() - loading
timer = math.round(timer / 100)
SecureCall(warn, "// [4/4]: Asteria Loaded in " .. timer .. " Seconds")
