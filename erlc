local SharedRequires = {}
setmetatable(SharedRequires, {
	__metatable = "Secure",
	__index = function(t, k)
		return rawget(t, k)
	end,
	__newindex = function(t, k, v)
		return rawset(t, k, v)
	end,
})

local names = {
	"TweenService",
	"Workspace",
	"ReplicatedStorage",
	"Players",
	"UserInputService",
	"RunService",
	"ScriptContext",
}

setmetatable(names, {
	__metatable = "Locked",
	__index = function(t, k)
		return rawget(t, k)
	end,
	__newindex = function(t, k, v)
		return rawset(t, k, v)
	end,
})

SharedRequires["Services"] = {}

SharedRequires["Services"].DumpServices = function()
	local services = {}
	setmetatable(services, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k)
		end,
		__newindex = function(t, k, v)
			return rawset(t, k, v)
		end,
	})
	for _, index in names do
		local service = game:GetService(index)
		local str = string.gsub(service.Name, " ", "")
		service.Name = str
		table.insert(services, service)
	end
	SharedRequires["Services"] = services
end

SharedRequires["Services"].GetService = function(name: string)
	for _, v in SharedRequires["Services"] do
		if rawequal(name, v.Name) then
			return v
		end
	end
end

SharedRequires["Maid"] = {}

SharedRequires["Maid"].Cleanup = function()
	SharedRequires = {}
	getgenv().Settings = {}
	getgenv().Hooks = {}
	for i, v in getgenv().Connections do
		v:Disconnect()
	end
	getgenv().Connections = {}
	getgenv().States = {}
	getgenv().NpcList = {}
	getgenv().Moblist = {}
end

SharedRequires["Maid"].Setup = function()
	getgenv().NpcList = {}
	getgenv().Settings = { Autofarm = { Toggle = false, Mobs = {}, Position = 10 } }
	getgenv().Hooks = {}
	getgenv().States = { Tweening = false }
	getgenv().Connections = {}

	setmetatable(getgenv().Settings, {
		__metatable = "Locked",
		__index = function(t: table, k)
			return rawget(t, k, val)
		end,
		__newindex = function(t, k)
			return rawset(t, k, val)
		end,
	})
end

SharedRequires["Env"] = {}

SharedRequires["Env"].loadstr = function(link)
	local ref = clonefunction(loadstring)
	return ref(game:HttpGet(link))()
end

SharedRequires["Env"].croutinelib = function()
	local lib = {}
	setmetatable(lib, {
		__metatable = "Locked",
		__index = function(t, k)
			return rawget(t, k)
		end,
		__newindex = function(t, k, v)
			return rawset(t, k, v)
		end,
	})

	for i, v in coroutine do
		if type(v) == "function" then
			local c = clonefunction(v)
			rawset(lib, i, c)
		end
	end
	return lib
end

SharedRequires["Env"].getnamecallmethod = function()
	local c = clonefunction(getnamecallmethod)
	return c()
end

SharedRequires["Env"].getcallingscript = function()
	local c = clonefunction(getcallingscript)
	return c()
end

SharedRequires["Env"].CallHelper = function(originalFunc)
	return setmetatable({}, {
		__call = function(t, ...)
			return originalFunc(...)
		end,
	})
end

SharedRequires["Env"].SecureCall = function(originalFunc, args)
	local tbl = {}
	setmetatable(tbl, {
		__call = function(t, ...)
			return SharedRequires["Env"].CallHelper(originalFunc)(...)
		end,
	})
	return tbl(args)
end

SharedRequires["Env"].getscriptfromthread = function(thread)
	if not thread or not rawequal(type(thread), "thread") then
		return
	end
	local func = debug.info(thread, 1, "f")
	return getfenv(func).script
end

SharedRequires["Env"].TrampHelper = function(originalFunc, ...)
	setthreadidentity(3)
	local result = originalFunc(...)
	setthreadidentity(3)
	return result
end

SharedRequires["Env"].Protect = function(gui)
    local old;
    -- hook namecall of find first child for out gui ^
end

SharedRequires["Env"].TrampolineCall = function(originalFunc, ...)
	return SharedRequires["Env"].TrampHelper(originalFunc, ...)
end

SharedRequires["Env"].Pcall = function(func, ...)
	local c = clonefunction(pcall)
	return c(func, ...)
end

SharedRequires["Bypasses"] = {}

SharedRequires["Bypasses"].ClearContext = function()
	task.spawn(function()
		while true do
			task.wait()
			for i, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
				v:Disable()
			end
		end
	end)
end

SharedRequires["Bypasses"].AdonisBypass = function()
	for i, v in getgc() do
		if type(v) ~= "table" then
			continue
		end
	end
end

SharedRequires["Bypasses"].Scan = function()

end

local Services = SharedRequires["Services"]
local Maid = SharedRequires["Maid"]
local LuaEnv = SharedRequires["Env"]
local croutine = LuaEnv.croutinelib()
local SecureCall = SharedRequires["Env"].SecureCall
local getscriptfromthread = SharedRequires["Env"].getscriptfromthread
local getcallingscript = SharedRequires["Env"].getcallingscript
local Pcall = SharedRequires["Env"].Pcall

Maid.Setup()

Services.DumpServices()

local Players = Services.GetService("Players")

local ReplicatedStorage = Services.GetService("ReplicatedStorage")
local UserInputService = Services.GetService("UserInputService")
local TweenService = Services.GetService("TweenService")
local Workspace = Services.GetService("Workspace")
local RunService = Services.GetService("RunService")
local plr = Players.LocalPlayer

Players = Services.GetService("Players")

SecureCall(print, "-----")

SharedRequires["Bypasses"].ClearContext()


function bypass()
    local old
    old = hookfunction(
        getrenv().coroutine.wrap,
        newcclosure(function(self, ...)
            if rawequal(getcallingscript().Name, "Network") then
                local args = { ... }
                local thread
                for i, v in args do
                    if rawequal(type(v),"thread")then
                        thread = v
                        return Pcall(coroutine.close, thread)
                    end
                end
                return Pcall(coroutine.close, thread)
            end
            return old(self, ...)
        end)
    )
end

bypass()

SecureCall(warn,"//: Asteria Loaded")

Maid.Cleanup()
